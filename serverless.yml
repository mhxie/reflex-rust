# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: reflex
provider:
  name: aws
  runtime: rust
  lambdaHashingVersion: 20201221
  memorySize: 256
  timeout: 65
  # you can overwrite defaults here
  stage: dev
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "sqs:SendMessage"
  #     Resource: [] # specify the queues of lamdbas to operate
  #   - Effect: Allow
  #     Action:
  #       - ec2:CreateNetworkInterface
  #       - ec2:DescribeNetworkInterfaces
  #       - ec2:DeleteNetworkInterface
  #     Resource:
  #       - 'arn:aws:ec2:us-west-2:*:*'

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true
  # exclude:
  #   -./**
  #   -mock-client/**
  # include:
  #   -serverless-client/**
  #   -mock/**

plugins:
  - serverless-rust

functions:
  # handler value syntax is `{cargo-package-name}.{bin-name}`
  # or `{cargo-package-name}` for short when you are building a
  # default bin for a given package.
  rust-cli:
    handler: bench-client
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSQueue, Arn]
          batchSize: 1
    vpc:
      securityGroupIds:
        - ${env:SECURITY_GROUP_ID}
      subnetIds:
        - ${env:SUBNET_ID}
    # provisionedConcurrency: 512

  # rust-cli-x:
  #   handler: bench-client
  #   vpc:
  #     securityGroupIds:
  #       - ${env:SECURITY_GROUP_ID_x}
  #     subnetIds:
  #       - ${env:SUBNET_ID_x}

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "${self:service}-sqs"
        VisibilityTimeout: 90 # needs to be larger than the function timout
        MessageRetentionPeriod: 360 # in seconds
    #     RedrivePolicy:
    #       deadLetterTargetArn:
    #         Fn::GetAtt: [DLQueue, Arn]
    #       maxReceiveCount: 1
    # DLQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     QueueName: "${self:service}-dlq"
    #     MessageRetentionPeriod: 360

  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
      Export:
        Name: "${self:service}-sqs-url"
    SQSQueueArn:
      Value:
        Fn::GetAtt: [SQSQueue, Arn]
      Export:
        Name: "${self:service}-sqs-arn"

custom:
  # this section customizes of the default
  # serverless-rust plugin settings
  rust:
    # flags passed to cargo
    # cargoFlags: '--features enable-awesome'
    # custom docker tag
    dockerTag: "0.3.0-rust-1.45.0"
    #  custom docker image
    dockerImage: "softprops/lambda-rust"
